{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46464357-4083-4594-a799-2766bf797d9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk, messagebox\n",
    "import platform\n",
    "\n",
    "if platform.system() == \"Windows\":\n",
    "    import winsound\n",
    "\n",
    "# Constants\n",
    "TEMP_LIMITS = {\n",
    "    \"Celsius\": (-273.15, 1_000_000),\n",
    "    \"Fahrenheit\": (-459.67, 1_000_000),\n",
    "    \"Kelvin\": (0, 1_000_000),\n",
    "}\n",
    "\n",
    "def convert_temperature():\n",
    "    try:\n",
    "        value = float(entry_temp.get())\n",
    "        unit = unit_var.get().split()[-1]\n",
    "\n",
    "        min_val, max_val = TEMP_LIMITS[unit]\n",
    "        if not (min_val <= value <= max_val):\n",
    "            messagebox.showwarning(\"Out of Range\", f\"{unit} must be between {min_val} and {max_val}.\")\n",
    "            return\n",
    "\n",
    "        if unit == \"Celsius\":\n",
    "            fahrenheit = (value * 9/5) + 32\n",
    "            kelvin = value + 273.15\n",
    "            result_text = f\"{value} °C = {fahrenheit:.2f} °F\\n{value} °C = {kelvin:.2f} K\"\n",
    "\n",
    "        elif unit == \"Fahrenheit\":\n",
    "            celsius = (value - 32) * 5/9\n",
    "            kelvin = celsius + 273.15\n",
    "            result_text = f\"{value} °F = {celsius:.2f} °C\\n{value} °F = {kelvin:.2f} K\"\n",
    "\n",
    "        elif unit == \"Kelvin\":\n",
    "            celsius = value - 273.15\n",
    "            fahrenheit = (celsius * 9/5) + 32\n",
    "            result_text = f\"{value} K = {celsius:.2f} °C\\n{value} K = {fahrenheit:.2f} °F\"\n",
    "\n",
    "        label_result.config(text=result_text, fg=fg_color, bg=highlight_bg)\n",
    "        label_result.after(500, lambda: label_result.config(bg=result_bg))\n",
    "        label_result.pack(pady=(5, 10))\n",
    "\n",
    "        if platform.system() == \"Windows\":\n",
    "            winsound.Beep(1000, 150)\n",
    "\n",
    "    except ValueError:\n",
    "        label_result.config(text=\"\")\n",
    "        messagebox.showerror(\"Invalid input\", \"Please enter a valid number.\")\n",
    "\n",
    "def reset_all():\n",
    "    entry_temp.delete(0, tk.END)\n",
    "    label_result.pack_forget()\n",
    "    unit_var.set(\"🌡️ Celsius\")\n",
    "    theme_var.set(\"Light\")\n",
    "    toggle_theme()\n",
    "\n",
    "def validate_integer_input(new_value):\n",
    "    if new_value in (\"\", \"-\", \"+\"):\n",
    "        return True\n",
    "    try:\n",
    "        float(new_value)\n",
    "        return True\n",
    "    except ValueError:\n",
    "        return False\n",
    "\n",
    "def toggle_theme():\n",
    "    global current_bg, fg_color, result_bg, highlight_bg\n",
    "\n",
    "    if theme_var.get() == \"Light\":\n",
    "        current_bg = \"#ffffff\"\n",
    "        fg_color = \"#000000\"\n",
    "        root.config(bg=\"#f0f8ff\")\n",
    "        frame.config(bg=current_bg)\n",
    "        result_bg = \"#f8f9fa\"\n",
    "        highlight_bg = \"#d1ecf1\"\n",
    "        style.theme_use(\"default\")\n",
    "    else:\n",
    "        current_bg = \"#2e2e2e\"\n",
    "        fg_color = \"#ffffff\"\n",
    "        root.config(bg=\"#1c1c1c\")\n",
    "        frame.config(bg=current_bg)\n",
    "        result_bg = \"#3a3a3a\"\n",
    "        highlight_bg = \"#444444\"\n",
    "        style.theme_use(\"clam\")\n",
    "        style.configure(\"TCombobox\", fieldbackground=\"#3a3a3a\", background=\"#3a3a3a\", foreground=\"#ffffff\")\n",
    "\n",
    "    entry_temp.config(bg=result_bg, fg=fg_color, insertbackground=fg_color)\n",
    "    unit_menu.config(foreground=fg_color)\n",
    "    label_result.config(bg=result_bg, fg=fg_color)\n",
    "    for widget in labels:\n",
    "        widget.config(bg=current_bg, fg=fg_color)\n",
    "\n",
    "# GUI setup\n",
    "root = tk.Tk()\n",
    "root.title(\"🌡️ Temperature Converter\")\n",
    "root.geometry(\"400x400\")\n",
    "root.resizable(False, False)\n",
    "\n",
    "style = ttk.Style()\n",
    "\n",
    "# Theme globals\n",
    "current_bg = \"#ffffff\"\n",
    "fg_color = \"#000000\"\n",
    "result_bg = \"#f8f9fa\"\n",
    "highlight_bg = \"#d1ecf1\"\n",
    "\n",
    "root.configure(bg=\"#f0f8ff\")\n",
    "\n",
    "frame = tk.Frame(root, bg=current_bg, bd=2, relief=\"groove\")\n",
    "frame.place(relx=0.5, rely=0.5, anchor=\"center\", width=350, height=380)\n",
    "\n",
    "# Dark Mode Toggle\n",
    "theme_var = tk.StringVar(value=\"Light\")\n",
    "theme_toggle = ttk.Checkbutton(\n",
    "    frame,\n",
    "    text=\"Dark Mode\",\n",
    "    variable=theme_var,\n",
    "    onvalue=\"Dark\",\n",
    "    offvalue=\"Light\",\n",
    "    command=toggle_theme\n",
    ")\n",
    "theme_toggle.place(relx=1.0, x=-10, y=10, anchor=\"ne\")\n",
    "\n",
    "title_label = tk.Label(frame, text=\"Convert Temperature\", font=(\"Helvetica\", 16, \"bold\"), bg=current_bg, fg=fg_color)\n",
    "title_label.pack(pady=(30, 10))\n",
    "\n",
    "vcmd = root.register(validate_integer_input)\n",
    "labels = []\n",
    "\n",
    "lbl_temp = tk.Label(frame, text=\"Enter Temperature:\", font=(\"Arial\", 12), bg=current_bg, fg=fg_color)\n",
    "lbl_temp.pack(pady=(5, 2))\n",
    "labels.append(lbl_temp)\n",
    "\n",
    "entry_temp = tk.Entry(\n",
    "    frame,\n",
    "    font=(\"Arial\", 12),\n",
    "    width=20,\n",
    "    justify=\"center\",\n",
    "    relief=\"solid\",\n",
    "    bd=1,\n",
    "    validate=\"key\",\n",
    "    validatecommand=(vcmd, \"%P\"),\n",
    "    bg=result_bg,\n",
    "    fg=fg_color,\n",
    "    insertbackground=fg_color\n",
    ")\n",
    "entry_temp.pack()\n",
    "\n",
    "lbl_unit = tk.Label(frame, text=\"Select Unit:\", font=(\"Arial\", 12), bg=current_bg, fg=fg_color)\n",
    "lbl_unit.pack(pady=(10, 2))\n",
    "labels.append(lbl_unit)\n",
    "\n",
    "unit_var = tk.StringVar()\n",
    "unit_var.set(\"🌡️ Celsius\")\n",
    "unit_menu = ttk.Combobox(\n",
    "    frame,\n",
    "    textvariable=unit_var,\n",
    "    values=[\"🌡️ Celsius\", \"🔥 Fahrenheit\", \"❄️ Kelvin\"],\n",
    "    state=\"readonly\",\n",
    "    font=(\"Arial\", 11)\n",
    ")\n",
    "unit_menu.pack()\n",
    "\n",
    "button_frame = tk.Frame(frame, bg=current_bg)\n",
    "button_frame.pack(pady=10)\n",
    "\n",
    "tk.Button(\n",
    "    button_frame,\n",
    "    text=\"Convert\",\n",
    "    command=convert_temperature,\n",
    "    font=(\"Arial\", 12, \"bold\"),\n",
    "    bg=\"#4a90e2\",\n",
    "    fg=\"white\",\n",
    "    activebackground=\"#357ab8\",\n",
    "    relief=\"flat\",\n",
    "    padx=15,\n",
    "    pady=5\n",
    ").pack(side=\"left\", padx=10)\n",
    "\n",
    "tk.Button(\n",
    "    button_frame,\n",
    "    text=\"Refresh\",\n",
    "    command=reset_all,\n",
    "    font=(\"Arial\", 12, \"bold\"),\n",
    "    bg=\"#d9534f\",\n",
    "    fg=\"white\",\n",
    "    activebackground=\"#c9302c\",\n",
    "    relief=\"flat\",\n",
    "    padx=15,\n",
    "    pady=5\n",
    ").pack(side=\"right\", padx=10)\n",
    "\n",
    "label_result = tk.Label(\n",
    "    frame,\n",
    "    text=\"\",\n",
    "    font=(\"Arial\", 12),\n",
    "    bg=result_bg,\n",
    "    fg=fg_color,\n",
    "    justify=\"center\",\n",
    "    wraplength=300,\n",
    "    relief=\"solid\",\n",
    "    bd=1,\n",
    "    padx=10,\n",
    "    pady=10\n",
    ")\n",
    "# Not packed initially\n",
    "\n",
    "labels.extend([title_label])\n",
    "\n",
    "root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5ee7935-a573-4b9f-a4f6-f9ea5b2e24a8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
